from langchain_core.messages import BaseMessage
from typing import Sequence, TypedDict
from pydantic import BaseModel, Field

class State(TypedDict):
    """TypedDict for the entire state structure."""
    messages: Sequence[BaseMessage]

    sender: str = ""

    # Path to the input data
    datapath: str = ""
    transformed_datapath: str = ""
    trained_model_datapath: str = ""
    
    eda_report: str = ""
    statistic_report: str = ""
    visualization_report: str = ""
    cluster_report: str = ""
    hypothesis_report: str = ""
    reasoning_report: str = ""
    total_summary_report: str = ""
    final_report: str = ""

    feature_engineering_report: str =""
    model_selection_report: str = ""
    model_training_report: str = ""
    model_evaluation_report: str = ""
    prediction_report: str = ""

class NoteState(BaseModel):
    """Pydantic model for the entire state structure, used by the NoteTaker agent."""
    messages: Sequence[BaseMessage] = Field(default_factory=list, description="List of message dictionaries")
    
    datapath: str = Field(default="", description="Path to the input data file")
    transformed_datapath: str = Field(default="", description="Path to the transformed data file after feature engineering")
    trained_model_path: str = Field(default="", description="Path to the serialized trained model file")
    
    eda_report: str = Field(default="", description="The summary report from the Data Explorer Agent")
    statistic_report: str = Field(default="", description="The summary report from the Data Statistic Agent")
    visualization_report: str = Field(default="", description="The summary report from the Data Visualization Agent")
    cluster_report: str = Field(default="", description="The summary report from the Data Cluster Agent")
    hypothesis_report: str = Field(default="", description="The questions generated by the Hypothesis Generator Agent")
    reasoning_report: str = Field(default="", description="The answers provided by the Reasoner Agent")
    total_summary_report: str = Field(default="", description="The comprehensive summary from the Quality Review Agent")
    final_report: str = Field(default="", description="The final insights report from the Synthesis Agent")

    feature_engineering_report: str = Field(default="", description="The report from the Feature Engineering Agent")
    model_selection_report: str = Field(default="", description="The report from the Model Selection Agent")
    model_training_report: str = Field(default="", description="The report from the Model Training Agent")
    model_evaluation_report: str = Field(default="", description="The report from the Model Evaluation Agent")
    prediction_report: str = Field(default="", description="The report from the Prediction Agent")

    class Config:
        arbitrary_types_allowed = True